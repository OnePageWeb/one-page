{
  "name": "简单地球模型",
  "desc": "可以转动的地球小组件",
  "tags": ["html", "earth", "model"],
  "config": "{\"text\":\"<!doctype html>\\n<html lang=\\\"zh-CN\\\">\\n<head>\\n  <meta charset=\\\"utf-8\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\" />\\n  <title>3D Earth — Drag to rotate</title>\\n  <style>\\n    html,body { height:100%; margin:0; background:transparent; overflow:hidden; }\\n    #container {\\n      width:100%;\\n      height:100%;\\n      position:relative;\\n      touch-action:none;\\n      cursor:grab;\\n    }\\n    #container.dragging { cursor:grabbing; }\\n  </style>\\n</head>\\n<body>\\n  <div id=\\\"container\\\"></div>\\n\\n  <script type=\\\"module\\\">\\n    import * as THREE from 'https://unpkg.com/three@0.152.0/build/three.module.js';\\n\\n    const ROTATION_SPEED = 0.12; // 自动旋转速率\\n    const container = document.getElementById('container');\\n\\n    const scene = new THREE.Scene();\\n    const camera = new THREE.PerspectiveCamera(35, container.clientWidth / container.clientHeight, 0.1, 2000);\\n    camera.position.set(0, 0, 3.6);\\n\\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio || 1, 2));\\n    renderer.setSize(container.clientWidth, container.clientHeight, false);\\n    container.appendChild(renderer.domElement);\\n\\n    // 光源\\n    scene.add(new THREE.AmbientLight(0xffffff, 0.6));\\n    const dirLight = new THREE.DirectionalLight(0xffffff, 0.9);\\n    dirLight.position.set(5, 3, 5);\\n    scene.add(dirLight);\\n\\n    // 主组\\n    const group = new THREE.Group();\\n    scene.add(group);\\n\\n    // 纹理\\n    const loader = new THREE.TextureLoader();\\n    const urls = {\\n      map: 'https://threejs.org/examples/textures/planets/earth_atmos_2048.jpg',\\n      bump: 'https://threejs.org/examples/textures/planets/earth_bump_2048.jpg',\\n      spec: 'https://threejs.org/examples/textures/planets/earth_specular_2048.jpg',\\n      clouds: 'https://threejs.org/examples/textures/planets/earth_clouds_1024.png'\\n    };\\n\\n    const R = 1, SEG = 64;\\n\\n    const earthMat = new THREE.MeshPhongMaterial({\\n      map: loader.load(urls.map),\\n      bumpMap: loader.load(urls.bump),\\n      bumpScale: 0.03,\\n      specularMap: loader.load(urls.spec),\\n      specular: new THREE.Color('grey')\\n    });\\n    const earth = new THREE.Mesh(new THREE.SphereGeometry(R, SEG, SEG), earthMat);\\n    group.add(earth);\\n\\n    const clouds = new THREE.Mesh(\\n      new THREE.SphereGeometry(R * 1.008, SEG, SEG),\\n      new THREE.MeshLambertMaterial({\\n        map: loader.load(urls.clouds),\\n        transparent: true,\\n        depthWrite: false,\\n        opacity: 0.9\\n      })\\n    );\\n    group.add(clouds);\\n\\n    // 拖拽控制\\n    let isDragging = false;\\n    let activePointerId = null;\\n    let lastX = 0, lastY = 0;\\n\\n    container.addEventListener('pointerdown', (e) => {\\n      isDragging = true;\\n      activePointerId = e.pointerId;\\n      lastX = e.clientX;\\n      lastY = e.clientY;\\n      try { container.setPointerCapture(activePointerId); } catch (err) {}\\n      container.classList.add('dragging');\\n    });\\n\\n    container.addEventListener('pointermove', (e) => {\\n      if (!isDragging || e.pointerId !== activePointerId) return;\\n      const dx = e.clientX - lastX;\\n      const dy = e.clientY - lastY;\\n      lastX = e.clientX;\\n      lastY = e.clientY;\\n      const ROT_FACTOR = 0.005;\\n      group.rotation.y += dx * ROT_FACTOR;\\n      group.rotation.x += dy * ROT_FACTOR;\\n      group.rotation.x = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, group.rotation.x));\\n    });\\n\\n    function endPointer(e) {\\n      if (!isDragging || e.pointerId !== activePointerId) return;\\n      isDragging = false;\\n      try { container.releasePointerCapture(activePointerId); } catch (err) {}\\n      activePointerId = null;\\n      container.classList.remove('dragging');\\n    }\\n    container.addEventListener('pointerup', endPointer);\\n    container.addEventListener('pointercancel', endPointer);\\n\\n    // 自动旋转（鼠标悬停时暂停）\\n    let hoverPaused = false;\\n    container.addEventListener('mouseenter', () => hoverPaused = true);\\n    container.addEventListener('mouseleave', () => hoverPaused = false);\\n\\n    let lastTime = performance.now();\\n    function animate(now) {\\n      requestAnimationFrame(animate);\\n      const dt = (now - lastTime) / 1000;\\n      lastTime = now;\\n\\n      if (!isDragging && !hoverPaused) {\\n        const angle = THREE.MathUtils.degToRad(ROTATION_SPEED) * dt;\\n        group.rotation.y += angle;\\n        clouds.rotation.y += angle * 1.25;\\n      }\\n\\n      renderer.render(scene, camera);\\n    }\\n    requestAnimationFrame(animate);\\n\\n    window.addEventListener('resize', () => {\\n      const w = container.clientWidth, h = container.clientHeight;\\n      camera.aspect = w / h;\\n      camera.updateProjectionMatrix();\\n      renderer.setSize(w, h, false);\\n    });\\n  </script>\\n</body>\\n</html>\\n\",\"params\":[]}",
  "w": 8,
  "h": 17,
  "type": "html"
}