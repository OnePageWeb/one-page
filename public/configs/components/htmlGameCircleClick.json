{
  "name": "小游戏-圆圈点击",
  "desc": "点击随机生成的圆圈，30s内点击越多，分数越高",
  "tags": ["html", "game"],
  "config": "{\"text\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n<meta charset=\\\"UTF-8\\\">\\n<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n<title>Line Circle Click Game</title>\\n<style>\\n  * { margin: 0; padding: 0; box-sizing: border-box; }\\n  body, html { width: 100%; height: 100%; overflow: hidden; background: #111; cursor: crosshair; }\\n  canvas { display: block; }\\n  #overlay {\\n    position: absolute;\\n    top: 0; left: 0;\\n    width: 100%; height: 100%;\\n    background: rgba(0,0,0,0.7);\\n    color: #fff;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    font-size: 2rem;\\n    flex-direction: column;\\n    z-index: 10;\\n  }\\n  #overlay button {\\n    margin-top: 20px;\\n    padding: 10px 20px;\\n    font-size: 1rem;\\n    cursor: pointer;\\n  }\\n</style>\\n</head>\\n<body>\\n<div id=\\\"overlay\\\">\\n  <div>Press SPACE to Start</div>\\n</div>\\n<canvas id=\\\"gameCanvas\\\"></canvas>\\n<script>\\nconst canvas = document.getElementById('gameCanvas');\\nconst ctx = canvas.getContext('2d');\\nlet width = canvas.width = window.innerWidth;\\nlet height = canvas.height = window.innerHeight;\\n\\nwindow.addEventListener('resize', () => {\\n    width = canvas.width = window.innerWidth;\\n    height = canvas.height = window.innerHeight;\\n});\\n\\nlet circles = [];\\nlet score = 0;\\nlet gameTime = 30;\\nlet elapsedTime = 0;\\nlet lastTime = 0;\\nlet spawnTimer = 0;\\nlet running = false;\\nlet flashTimer = 0;\\n\\nconst overlay = document.getElementById('overlay');\\n\\nclass Circle {\\n    constructor(x, y) {\\n        this.x = x;\\n        this.y = y;\\n        this.radius = 0;\\n        this.maxRadius = 30;\\n        this.duration = 2; // 圈扩散时间 2 秒\\n        this.time = 0;\\n        this.dead = false;\\n        this.clicked = false;\\n        this.clickAnimation = 0;\\n    }\\n\\n    update(dt) {\\n        if (!this.clicked) {\\n            this.time += dt;\\n            this.radius = (this.time / this.duration) * this.maxRadius;\\n            if (this.time >= this.duration) this.dead = true;\\n        } else {\\n            this.clickAnimation += dt * 5;\\n            this.radius += this.clickAnimation * 50 * dt;\\n            if (this.clickAnimation >= 1) this.dead = true;\\n        }\\n    }\\n\\n    draw(ctx) {\\n        ctx.strokeStyle = this.clicked ? '#ff0' : '#0ff';\\n        ctx.lineWidth = 2;\\n        ctx.beginPath();\\n        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\\n        ctx.stroke();\\n    }\\n\\n    isClicked(x, y) {\\n        const dx = x - this.x;\\n        const dy = y - this.y;\\n        return !this.clicked && Math.sqrt(dx*dx + dy*dy) <= this.radius;\\n    }\\n\\n    onClick() {\\n        this.clicked = true;\\n        this.clickAnimation = 0;\\n    }\\n}\\n\\nfunction spawnCircle() {\\n    const x = Math.random() * (width - 100) + 50;\\n    const y = Math.random() * (height - 100) + 50;\\n    circles.push(new Circle(x, y));\\n}\\n\\nfunction gameLoop(timestamp) {\\n    if (!lastTime) lastTime = timestamp;\\n    const dt = (timestamp - lastTime) / 1000;\\n    lastTime = timestamp;\\n    if (!running) return;\\n\\n    elapsedTime += dt;\\n    spawnTimer += dt * 1000;\\n\\n    const t = elapsedTime / gameTime;\\n    const currentInterval = 1000 - t * (1000 - 200);\\n\\n    if (spawnTimer >= currentInterval) {\\n        spawnTimer = 0;\\n        spawnCircle();\\n    }\\n\\n    circles.forEach(c => c.update(dt));\\n    circles = circles.filter(c => !c.dead);\\n\\n    if (flashTimer > 0) flashTimer -= dt;\\n\\n    ctx.clearRect(0, 0, width, height);\\n    circles.forEach(c => c.draw(ctx));\\n\\n    if (flashTimer > 0) {\\n        ctx.strokeStyle = 'red';\\n        ctx.lineWidth = 6;\\n        ctx.strokeRect(3, 3, width-6, height-6);\\n    }\\n\\n    ctx.fillStyle = '#fff';\\n    ctx.font = '20px Arial';\\n    ctx.fillText(`Score: ${score}`, 20, 30);\\n    ctx.fillText(`Time: ${Math.max(0, Math.floor(gameTime - elapsedTime))}`, 20, 60);\\n\\n    if (elapsedTime >= gameTime) {\\n        running = false;\\n        overlay.innerHTML = `\\n            <div>Game Over!<br>Score: ${score}</div>\\n            <button onclick=\\\"startGame()\\\">Restart</button>\\n        `;\\n        overlay.style.display = 'flex';\\n        return;\\n    }\\n\\n    requestAnimationFrame(gameLoop);\\n}\\n\\ncanvas.addEventListener('click', e => {\\n    const rect = canvas.getBoundingClientRect();\\n    const mx = e.clientX - rect.left;\\n    const my = e.clientY - rect.top;\\n    let hit = false;\\n    circles.forEach(c => {\\n        if (c.isClicked(mx, my)) {\\n            c.onClick();\\n            score++;\\n            hit = true;\\n        }\\n    });\\n    if (!hit) {\\n        score--;\\n        flashTimer = 0.2;\\n    }\\n});\\n\\nfunction startGame() {\\n    overlay.style.display = 'none';\\n    circles = [];\\n    score = 0;\\n    elapsedTime = 0;\\n    lastTime = 0;\\n    spawnTimer = 0;\\n    flashTimer = 0;\\n    running = true;\\n    requestAnimationFrame(gameLoop);\\n}\\n\\nwindow.addEventListener('keydown', e => {\\n    if (e.code === 'Space' && !running) {\\n        startGame();\\n    }\\n});\\n</script>\\n</body>\\n</html>\\n\",\"params\":[]}",
  "style": ".htmlContent {\n  border: 2px dashed #606060;\n  height: calc(100% - 4px);\n  width: calc(100% - 4px);\n}",
  "w": 13,
  "h": 25,
  "type": "html"
}